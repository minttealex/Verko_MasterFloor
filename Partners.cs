//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Verko_MasterFloor
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Partners
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Partners()
        {
            this.PartnerProducts = new HashSet<PartnerProducts>();
        }
    
        public int PartnerID { get; set; }
        public int PartnerTypeID { get; set; }
        public string PartnerCompanyName { get; set; }
        public string PartnerDirectorSurname { get; set; }
        public string PartnerDirectorName { get; set; }
        public string PartnerDirectorPatronymic { get; set; }
        public string PartnerEmail { get; set; }
        public string PartnerPhone { get; set; }
        public string PartnerAddress { get; set; }
        public string PartnerINN { get; set; }
        public int PartnerRating { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<PartnerProducts> PartnerProducts { get; set; }
        public virtual PartnerTypes PartnerTypes { get; set; }
        public string FullName
        {
            get
            {
                return $"{PartnerDirectorSurname} {PartnerDirectorName} {PartnerDirectorPatronymic}";
            }
        }
        public int Discount
        {
            get
            {
                int totalQuantity = PartnerProducts?.Sum(pp => pp.ProductQuantity) ?? 0;

                if (totalQuantity < 10000)
                    return 0;
                else if (totalQuantity < 50000)
                    return 5;
                else if (totalQuantity < 300000)
                    return 10;
                else
                    return 15;
            }
        }
    }
}
